import numpy as np
import pandas as pd

# Step 1: 업로드된 파일 읽기
file_name = "mt-kospi-new.csv"  # 이미 업로드된 파일명 사용
df = pd.read_csv(file_name, header=None)

# Step 2: 데이터 전처리
# 컬럼 이름 지정 (Index10과 Index11 포함)
df.columns = [
    "Date", "Open", "High", "Low", "Close",
    "Index1", "Index2", "Index3", "Index4", "Index5",
    "Index6", "Index7", "Index8", "Index9", "Index10", "Index11"
]

# 날짜를 datetime 형식으로 변환
df['Date'] = pd.to_datetime(df['Date'])

# 전일 대비 변동률 계산 함수
def calculate_pct_change(df, col_name_current, col_name_previous):
    return (df[col_name_current] / df[col_name_previous].shift(1) - 1) * 100

# 시가 변동률(Open_Pct_Change) 계산
df['Open_Pct_Change'] = calculate_pct_change(df, 'Open', 'Close')

# 각 Index 변동률 계산 (전일 대비)
for i in range(1, 12):  # Index1부터 Index11까지 포함
    df[f'Index{i}_Pct_Change'] = calculate_pct_change(df, f'Index{i}', f'Index{i}')

# Step 3: 최적 상승/하락 조정률 찾는 함수
def find_optimal_adjustment_rate(index_col, open_pct_col, open_col, df):
    best_rising_rate = 0
    best_falling_rate = 0
    best_rising_profit = -np.inf
    best_falling_profit = -np.inf

    # 조정률 범위 설정 (0부터 5까지, 0.005 단위)
    for adjustment_rate in np.arange(0.000, 5.000, 0.005):
        rising_profit = 0
        falling_profit = 0

        # 각 행(row)에 대해 매수/매도 시뮬레이션 수행
        for _, row in df.iterrows():
            # 결측치가 없는 경우에만 계산
            if pd.notna(row[index_col]) and pd.notna(row[open_pct_col]) and pd.notna(row[open_col]):
                adjusted_index_change = row[index_col] * adjustment_rate

                # 상승 조정률 (Index > 0)
                if row[index_col] > 0:
                    if row[open_pct_col] > adjusted_index_change:
                        rising_profit += row['Close'] - row['Open']  # 매수 진입
                    elif row[open_pct_col] < adjusted_index_change:
                        rising_profit += row['Open'] - row['Close']  # 매도 진입

                # 하락 조정률 (Index < 0)
                elif row[index_col] < 0:
                    if row[open_pct_col] < adjusted_index_change:
                        falling_profit += row['Open'] - row['Close']  # 매도 진입
                    elif row[open_pct_col] > adjusted_index_change:
                        falling_profit += row['Close'] - row['Open']  # 매수 진입

        # 최대 상승 수익과 최적 상승 조정률 업데이트
        if rising_profit > best_rising_profit:
            best_rising_profit = rising_profit
            best_rising_rate = adjustment_rate

        # 최대 하락 수익과 최적 하락 조정률 업데이트
        if falling_profit > best_falling_profit:
            best_falling_profit = falling_profit
            best_falling_rate = adjustment_rate

    return best_rising_rate, best_rising_profit, best_falling_rate, best_falling_profit

# Step 4: 각 Index에 대해 최적 조정률 계산
optimal_rates = {}
for i in range(1, 12):  # Index1부터 Index11까지 포함
    index_col = f'Index{i}_Pct_Change'
    open_pct_col = 'Open_Pct_Change'
    open_col = 'Open'

    # 최적 조정률 계산
    rising_rate, rising_profit, falling_rate, falling_profit = find_optimal_adjustment_rate(index_col, open_pct_col, open_col, df)
    optimal_rates[f'Index{i}'] = {
        'Rising Optimal Rate': rising_rate,
        'Rising Max Profit': rising_profit,
        'Falling Optimal Rate': falling_rate,
        'Falling Max Profit': falling_profit
    }

# Step 5: 최적 조정률 및 수익 결과 출력
for index, values in optimal_rates.items():
    print(f"{index}:")
    print(f"  최적 상승 조정률 = {values['Rising Optimal Rate']:.3f}, 최대 상승 수익 = {values['Rising Max Profit']:.2f}")
    print(f"  최적 하락 조정률 = {values['Falling Optimal Rate']:.3f}, 최대 하락 수익 = {values['Falling Max Profit']:.2f}")
    print()


-----------
Index1:
  최적 상승 조정률 = 0.575, 최대 상승 수익 = 238.85
  최적 하락 조정률 = 0.795, 최대 하락 수익 = 282.70

Index2:
  최적 상승 조정률 = 1.100, 최대 상승 수익 = 359.90
  최적 하락 조정률 = 0.640, 최대 하락 수익 = 360.45

Index3:
  최적 상승 조정률 = 1.155, 최대 상승 수익 = 294.05
  최적 하락 조정률 = 0.645, 최대 하락 수익 = 328.00

Index4:
  최적 상승 조정률 = 0.945, 최대 상승 수익 = 419.50
  최적 하락 조정률 = 0.605, 최대 하락 수익 = 367.30

Index5:
  최적 상승 조정률 = 0.790, 최대 상승 수익 = 242.65
  최적 하락 조정률 = 0.560, 최대 하락 수익 = 378.40

Index6:
  최적 상승 조정률 = 0.000, 최대 상승 수익 = 34.10
  최적 하락 조정률 = 0.000, 최대 하락 수익 = 68.85

Index7:
  최적 상승 조정률 = 0.000, 최대 상승 수익 = 84.30
  최적 하락 조정률 = 0.000, 최대 하락 수익 = -11.50

Index8:
  최적 상승 조정률 = 0.000, 최대 상승 수익 = 45.15
  최적 하락 조정률 = 0.000, 최대 하락 수익 = 44.85

Index9:
  최적 상승 조정률 = 3.015, 최대 상승 수익 = -67.30
  최적 하락 조정률 = 0.020, 최대 하락 수익 = 252.20

Index10:
  최적 상승 조정률 = 0.025, 최대 상승 수익 = -73.95
  최적 하락 조정률 = 0.055, 최대 하락 수익 = 192.75

Index11:
  최적 상승 조정률 = 1.900, 최대 상승 수익 = -27.20
  최적 하락 조정률 = 0.030, 최대 하락 수익 = 261.60
